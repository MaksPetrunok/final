package com.station.persistent;

import com.station.entity.Bus;
import org.apache.log4j.Logger;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class BusDao<T> implements Dao<Bus> {

    private static final Logger LOG = Logger.getLogger(BusDao.class);

    @Override
    public boolean add(Bus bus) {
        boolean addSucceed = false;
        String sql = "INSERT INTO `buses`" +
                    "(`model`, `seat_amount`, `cdl_class_id`)" +
                    "VALUES (?, ?, ?)";
        PreparedStatement preparedStatement = null;
        try {
            String autoGenerated[] = {"id"};
            preparedStatement = Database.getConnection().prepareStatement(sql, autoGenerated);
            preparedStatement.setString(1, bus.getModel());
            preparedStatement.setInt(2, bus.getSeatAmount());
            preparedStatement.setInt(3, bus.getCdlClassId());

            int result = preparedStatement.executeUpdate();
            if (result == 1) {
                ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    bus.setId(generatedKeys.getInt(1));
                    addSucceed = true;
                }
            } else {
                LOG.error("Failed to insert new record (0 records affected): " + bus.toString());
            }
        } catch (SQLException e) {
            LOG.error("Failed to insert new record", e);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
            } catch (SQLException e) {
                LOG.error("Unable to close statement", e);
            }
        }
        return addSucceed;
    }

    @Override
    public List<Bus> getAll() {
        String sql = "SELECT * FROM buses";
        List<Bus> buses = new ArrayList<Bus>();
        Statement statement = null;
        try {
            statement = Database.getConnection().createStatement();
            ResultSet resultSet = statement.executeQuery(sql);

            while (resultSet.next()) {
                buses.add(new Bus(
                        resultSet.getInt("id"),
                        resultSet.getString("model"),
                        resultSet.getInt("seat_amount"),
                        resultSet.getInt("cdl_class_id")
                ));
            }
        } catch (SQLException e) {
            LOG.error("Unable to fetch data", e);
        }
        return buses;
    }

    @Override
    public Bus get(int id) {
        String sql = "SELECT * FROM buses WHERE id=?";

        Statement statement = null;
        try {
            statement = Database.getConnection().createStatement();
            ResultSet resultSet = statement.executeQuery(sql);

            if (resultSet.next()) {
                return new Bus(
                        resultSet.getInt("id"),
                        resultSet.getString("model"),
                        resultSet.getInt("seat_amount"),
                        resultSet.getInt("cdl_class_id")
                );
            }
        } catch (SQLException e) {
            LOG.error("Unable to fetch data", e);
        }
        return null;
    }

    @Override
    public boolean update(Bus bus) {
        boolean updateSucceed = false;
        String sql = "UPDATE `buses` SET " +
                    "`model`=?, " +
                    "`seat_amount`=?, " +
                    "`cdl_class_id`=? " +
                    "WHERE `id`=?";

        PreparedStatement preparedStatement = null;
        try {
            preparedStatement = Database.getConnection().prepareStatement(sql);
            preparedStatement.setString(1, bus.getModel());
            preparedStatement.setInt(2, bus.getSeatAmount());
            preparedStatement.setInt(3, bus.getCdlClassId());
            preparedStatement.setInt(4, bus.getId());

            int result = preparedStatement.executeUpdate();
            if (result != 1) {
                LOG.error("Unable update bus record id=" + bus.getId());
            } else {
                updateSucceed = true;
            }
        } catch (SQLException e) {
            LOG.error("Unable to update bus record id=" + bus.getId(), e);
        }
        return updateSucceed;
    }

    @Override
    public void delete(Bus bus) {
        String sql = "DELETE FROM `buses` WHERE `id`=?";
        PreparedStatement preparedStatement = null;
        try {
            preparedStatement = Database.getConnection().prepareStatement(sql);

            preparedStatement.setInt(1, bus.getId());
            int result = preparedStatement.executeUpdate();
            if (result != 1) {
                LOG.warn("No records deleted" + bus.getId());
            }
        } catch (SQLException e) {
            LOG.error("Cannot delete bus id=" + bus.getId(), e);
        }
    }

    public static void main(String[] args) {
        LOG.info("Test message");
    }
}
